{"version":3,"sources":["components/Navbar.js","components/Textform.js","Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","tital","type","id","class","role","onClick","redmode","yellowmode","greenmode","toggleMode","htmlfor","Textform","useState","text","setText","heading","value","style","backgroundColor","color","onChange","event","console","log","target","rows","NewText","toUpperCase","ShowAlert","toLowerCase","split","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setalert","message","setTimeout","Abouttext","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.41a8403f.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\nreturn (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.tital}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\"> Home </a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\" to=\"/about\">{props.Abouttext}</a>\r\n        </li>     */}\r\n      </ul>\r\n      <div class=\"btn-group\" role=\"group\" aria-label=\"Basic mixed styles example\">\r\n        <strong><button type=\"button\" onClick={props.redmode} class=\"btn btn-danger mx-1\">Red Mode</button> </strong>\r\n        <strong><button type=\"button\" onClick={props.yellowmode} class=\"btn btn-warning mx-1\">Yellow Mode</button></strong>\r\n        <strong><button type=\"button\" onClick={props.greenmode} class=\"btn btn-success mx-1\" >Green Mode</button></strong>\r\n      </div>\r\n      <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'} mx-3`}>\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title :PropTypes.string.isRequired,\r\n    About : PropTypes.string.isRequired,\r\n}\r\n\r\n// Navbar.defaultProps = {\r\n//     tital : \"TextUtils55\" ,\r\n//     About : \"About\"\r\n\r\n// }","import React, { useState } from 'react';\r\nexport default function Textform(props) {\r\n    const HandleUpClick = () => {\r\n        console.log(\"Uppercase was clicked\" + text);\r\n        let NewText = text.toUpperCase();\r\n        setText(NewText);\r\n        props.ShowAlert(\"Converted to Uppercase!!\" , \"success\");\r\n    }\r\n    const HandleLowClick = () => {\r\n        console.log(\"Lowercase was clicked\" + text);\r\n        let NewText = text.toLowerCase();\r\n        setText(NewText);\r\n        props.ShowAlert(\"Converted to Lowercase!!\" , \"success\");\r\n    }\r\n    const Handleclear = () => { \r\n        console.log(\"clear was clicked\" + text);\r\n        let NewText = \"\";\r\n        setText(NewText);\r\n        props.ShowAlert(\"Text is Cleared!!\" , \"success\");\r\n    }\r\n\r\n\r\n    const handleOnchange = (event) => {\r\n        console.log(\"on change\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    return (\r\n        < >\r\n            <div className={`container text-${props.mode === 'light' || props.mode === 'warning'  ? 'dark' : 'light'}`} >\r\n                <h1>{props.heading} </h1>\r\n                <div className=\"mb-3\" >\r\n                    <textarea className=\"form-control\" value={text} style={{backgroundColor : props.mode === 'light' ? 'white' : '#f8f1f1' , color : props.mode === 'light' ? '#f8f1f1' : 'white'}} onChange={handleOnchange} id=\"mybox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className={`btn btn-${props.mode === 'light' ? 'primary' : 'dark'} mx-2`}onClick={HandleUpClick}>Convert To Uppercase</button>\r\n                <button className={`btn btn-${props.mode === 'light' ? 'primary' : 'dark'} mx-2`} onClick={HandleLowClick}>Convert To Lowercase</button>\r\n                <button className={`btn btn-${props.mode === 'light' ? 'primary' : 'dark'} mx-2`} onClick={Handleclear}>Clear Text</button>\r\n\r\n            </div>\r\n            <div className={`container my-4 text-${props.mode === 'light' || props.mode === 'warning' ? 'dark' : 'light'}`} >\r\n                <h2> Your Text Summary</h2>\r\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length} Minutes you could take to read!!</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0 ? text : \"Enter Something to preview it here!!\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n\r\nfunction Alert(props) {\r\n    const capitalize =(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert &&<div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n         <strong>{capitalize(props.alert.type)} : {props.alert.msg} </strong>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport About from './components/About';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react';\nimport Alert from './Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setalert] = useState(null);\n\n  const ShowAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 1250);\n  }\n\n  const redmode = () => {\n    setMode('danger');\n    document.body.style.backgroundColor = '#310308c7';\n    ShowAlert(\"Red Mode is Enabled!!\", \"success\");\n  }\n  const greenmode = () => {\n    setMode('success');\n    document.body.style.backgroundColor = '#135b44';\n    ShowAlert(\"Green Mode is Enabled!!\", \"success\");\n  }\n  const yellowmode = () => {\n    setMode('warning');\n    document.body.style.backgroundColor = '#f2f26e9c';\n    ShowAlert(\"Yellow Mode is Enabled!!\", \"success\");\n  }\n  const toggleMode = () => {\n    if (mode === 'light' || mode === 'danger' || mode === 'warning' || mode === 'success') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#060827';\n      ShowAlert(\"Dark Mode is Enabled!!\", \"success\");\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      ShowAlert(\"Light Mode is Enabled!!\", \"success\");\n    }\n  }\n  return (\n    < >\n      {/* <Router> */}\n      <Navbar tital=\"TextUtils\" mode={mode}  Abouttext=\"About\" toggleMode={toggleMode} greenmode={greenmode} redmode={redmode} yellowmode={yellowmode} />\n      <Alert alert={alert} />\n      <div className=\"container  my-4\">\n        {/* <Switch> */}\n          {/* <Route path=\"/About\">\n            <About/>\n          </Route>\n          <Route path=\"/\"> */}\n            <Textform heading=\"Enter the Text\" mode={mode} ShowAlert={ShowAlert} />\n          {/* </Route>\n        </Switch> */}\n      </div>\n      {/* </Router> */}\n\n    </ >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}